# handlers/basic.py
from telegram import Update
from telegram.ext import ContextTypes
import database as db
from datetime import datetime

async def welcome_member(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """‡¶®‡¶§‡ßÅ‡¶® ‡¶Æ‡ßá‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶ú‡ßü‡ßá‡¶® ‡¶ï‡¶∞‡¶≤‡ßá ‡¶∏‡ßç‡¶¨‡¶æ‡¶ó‡¶§ ‡¶ú‡¶æ‡¶®‡¶æ‡ßü ‡¶è‡¶¨‡¶Ç ‡¶°‡¶æ‡¶ü‡¶æ‡¶¨‡ßá‡¶∏‡ßá ‡¶≤‡¶ó ‡¶ï‡¶∞‡ßá‡•§"""
    new_members = update.message.new_chat_members
    chat_id = update.effective_chat.id
    
    welcome_message_template = db.get_group_setting(chat_id, 'welcome_message')
    
    for member in new_members:
        if not member.is_bot:
            db.log_user_join(member.id, chat_id) # ‡¶°‡¶æ‡¶ü‡¶æ‡¶¨‡ßá‡¶∏‡ßá ‡¶≤‡¶ó
            user_mention = member.mention_html()
            message = welcome_message_template.format(user=user_mention, group=update.effective_chat.title)
            await update.message.reply_text(message, parse_mode='HTML')

async def goodbye_member(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """‡¶ï‡ßá‡¶â ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ‡¶≤‡¶ø‡¶≠ ‡¶ï‡¶∞‡¶≤‡ßá ‡¶¨‡¶ø‡¶¶‡¶æ‡ßü ‡¶ú‡¶æ‡¶®‡¶æ‡ßü‡•§"""
    left_member = update.message.left_chat_member
    if left_member:
        await update.message.reply_text(f"‡¶¨‡¶ø‡¶¶‡¶æ‡ßü, {left_member.first_name}! ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶¶‡ßá‡¶ñ‡¶æ ‡¶π‡¶¨‡ßá‡•§")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """/help ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°‡ßá‡¶∞ ‡¶Æ‡¶æ‡¶ß‡ßç‡¶Ø‡¶Æ‡ßá ‡¶∏‡¶¨ ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°‡ßá‡¶∞ ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ ‡¶¶‡ßá‡¶ñ‡¶æ‡ßü‡•§"""
    help_text = """
    ü§ñ **All-in-One Bot Commands** ü§ñ

    **Basic**
    /help - ‡¶è‡¶á ‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø ‡¶¨‡¶æ‡¶∞‡ßç‡¶§‡¶æ ‡¶¶‡ßá‡¶ñ‡ßÅ‡¶®
    /rules - ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá‡¶∞ ‡¶®‡¶ø‡ßü‡¶Æ‡¶æ‡¶¨‡¶≤‡ßÄ
    /info - ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶§‡¶•‡ßç‡¶Ø ‡¶¶‡ßá‡¶ñ‡ßÅ‡¶®

    **Moderation (Admin Only)**
    /ban `[reply]` - ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡¶ï‡ßá ‡¶¨‡ßç‡¶Ø‡¶æ‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®
    /kick `[reply]` - ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡¶ï‡ßá ‡¶ï‡¶ø‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®
    /setwelcome `[message]` - ‡¶ì‡ßü‡ßá‡¶≤‡¶ï‡¶æ‡¶Æ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®
    /setrules `[message]` - ‡¶®‡¶ø‡ßü‡¶Æ‡¶æ‡¶¨‡¶≤‡ßÄ ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®

    **Utility & Fun**
    /weather `[city]` - ‡¶∂‡¶π‡¶∞‡ßá‡¶∞ ‡¶Ü‡¶¨‡¶π‡¶æ‡¶ì‡ßü‡¶æ
    /joke - ‡¶è‡¶ï‡¶ü‡¶ø ‡¶ï‡ßå‡¶§‡ßÅ‡¶ï ‡¶∂‡ßÅ‡¶®‡ßÅ‡¶®

    **AI Features**
    /ask `[question]` - AI ‡¶ï‡ßá ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®
    `@bot_username` - ‡¶¨‡¶ü‡ßá‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶ï‡¶•‡¶æ ‡¶¨‡¶≤‡ßÅ‡¶®
    """
    await update.message.reply_text(help_text, parse_mode='Markdown')

async def rules_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá‡¶∞ ‡¶®‡¶ø‡ßü‡¶Æ‡¶æ‡¶¨‡¶≤‡ßÄ ‡¶™‡¶æ‡¶†‡¶æ‡ßü‡•§"""
    rules = db.get_group_setting(update.effective_chat.id, 'rules')
    await update.message.reply_text(f"üìú **‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá‡¶∞ ‡¶®‡¶ø‡ßü‡¶Æ‡¶æ‡¶¨‡¶≤‡ßÄ:**\n\n{rules}", parse_mode='Markdown')

async def info_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡ßá‡¶∞ ‡¶§‡¶•‡ßç‡¶Ø ‡¶¶‡ßá‡¶ñ‡¶æ‡ßü‡•§"""
    user = update.effective_user
    chat_id = update.effective_chat.id
    
    user_data = db.get_user_info(user.id, chat_id)
    join_date_str = "N/A"
    message_count = "N/A"
    if user_data:
        join_timestamp, msg_count = user_data
        if join_timestamp:
            join_date_str = datetime.fromtimestamp(join_timestamp).strftime('%d %b %Y')
        message_count = msg_count

    info_text = (
        f"üë§ **User Info**\n\n"
        f"**Name:** {user.full_name}\n"
        f"**Username:** @{user.username}\n"
        f"**ID:** `{user.id}`\n"
        f"**Joined:** {join_date_str}\n"
        f"**Messages:** {message_count}"
    )
    await update.message.reply_text(info_text, parse_mode='Markdown')

async def message_counter(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """‡¶∏‡¶¨ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶≤‡¶ó ‡¶ï‡¶∞‡ßá‡•§"""
    if update.message and not update.effective_user.is_bot:
        db.log_message(update.effective_user.id, update.effective_chat.id)
